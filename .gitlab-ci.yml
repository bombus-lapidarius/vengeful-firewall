image: mcr.microsoft.com/dotnet/sdk:5.0


stages:
  - build
  - test
  - publish
  # - deploy


# run builds and tests in parallel for all components
build Encryption for linux-x64:
  stage: build
  script:
    - dotnet build -r linux-x64 -c Release ./src/main/Encryption/VengefulFi.Encryption.fsproj
  artifacts:
    paths:
      - src/main/Encryption/bin/Release/
      - src/main/Encryption/obj/Release/

build Encryption for win10-x64:
  stage: build
  script:
    - dotnet build -r win10-x64 -c Release ./src/main/Encryption/VengefulFi.Encryption.fsproj
  artifacts:
    paths:
      - src/main/Encryption/bin/Release/
      - src/main/Encryption/obj/Release/

build Ipld for linux-x64:
  stage: build
  script:
    - dotnet build -r linux-x64 -c Release ./src/main/Ipld/VengefulFi.Ipld.fsproj
  artifacts:
    paths:
      - src/main/Ipld/bin/Release/
      - src/main/Ipld/obj/Release/

build Ipld for win10-x64:
  stage: build
  script:
    - dotnet build -r win10-x64 -c Release ./src/main/Ipld/VengefulFi.Ipld.fsproj
  artifacts:
    paths:
      - src/main/Ipld/bin/Release/
      - src/main/Ipld/obj/Release/

build UnixFS for linux-x64:
  stage: build
  script:
    - dotnet build -r linux-x64 -c Release ./src/main/UnixFS/VengefulFi.UnixFS.fsproj
  artifacts:
    paths:
      - src/main/UnixFS/bin/Release/
      - src/main/UnixFS/obj/Release/

build UnixFS for win10-x64:
  stage: build
  script:
    - dotnet build -r win10-x64 -c Release ./src/main/UnixFS/VengefulFi.UnixFS.fsproj
  artifacts:
    paths:
      - src/main/UnixFS/bin/Release/
      - src/main/UnixFS/obj/Release/

build RpcApi for linux-x64:
  stage: build
  script:
    - dotnet build -r linux-x64 -c Release ./src/main/RpcApi/VengefulFi.RpcApi.csproj
  artifacts:
    paths:
      - src/main/RpcApi/bin/Release/
      - src/main/RpcApi/obj/Release/

build RpcApi for win10-x64:
  stage: build
  script:
    - dotnet build -r win10-x64 -c Release ./src/main/RpcApi/VengefulFi.RpcApi.csproj
  artifacts:
    paths:
      - src/main/RpcApi/bin/Release/
      - src/main/RpcApi/obj/Release/


# run builds and tests in parallel for all components
publish RpcApi for linux-x64:
  stage: publish
  # create a single executable native binary
  script:
    - "dotnet publish -r linux-x64 -c Release /p:PublishSingleFile=true ./src/main/RpcApi/VengefulFi.RpcApi.csproj"
  dependencies:
    - "build RpcApi for linux-x64"
  artifacts:
    paths:
      - src/main/RpcApi/bin/Release/
      - src/main/RpcApi/obj/Release/

publish RpcApi for win10-x64:
  stage: publish
  # create a single executable native binary
  script:
    - "dotnet publish -r win10-x64 -c Release /p:PublishSingleFile=true ./src/main/RpcApi/VengefulFi.RpcApi.csproj"
  dependencies:
    - "build RpcApi for win10-x64"
  artifacts:
    paths:
      - src/main/RpcApi/bin/Release/
      - src/main/RpcApi/obj/Release/


# run builds and tests in parallel for all components
test Encryption:
  stage: test
  script:
    - dotnet test -c Release --collect:"XPlat Code Coverage" ./src/test/Encryption.Tests/VengefulFi.Encryption.Tests.fsproj
  artifacts:
    paths:
      - src/main/Encryption/bin/Release/
      - src/main/Encryption/obj/Release/

test Ipld:
  stage: test
  script:
    - dotnet test -c Release --collect:"XPlat Code Coverage" ./src/test/Ipld.Tests/VengefulFi.Ipld.Tests.fsproj
  artifacts:
    paths:
      - src/main/Ipld/bin/Release/
      - src/main/Ipld/obj/Release/


# run builds and tests in parallel for all components
# deploy RpcApi for linux-x64:
  # stage: deploy
  # script:
    # - TODO

# run builds and tests in parallel for all components
# deploy RpcApi for win10-x64:
  # stage: deploy
  # script:
    # - TODO
